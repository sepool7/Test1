{"version":3,"file":"static/js/5568.2b9282cb.chunk.js","mappings":"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","sources":["webpack://xchain/./src/components/CTA/style.module.scss?1814","components/CTA/index.jsx","components/LazyImage.jsx","components/Spring.jsx","../node_modules/react-use/esm/useEffectOnce.js","../node_modules/react-use/esm/useUnmount.js","../node_modules/react-use/esm/useRafState.js","../node_modules/react-use/esm/misc/util.js","../node_modules/react-use/esm/useWindowSize.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"style_wrapper__c-uQl\",\"main\":\"style_main__AYU7i\",\"emojis\":\"style_emojis__jT5wA\",\"main_text\":\"style_main_text__t-fxm\",\"main_btn\":\"style_main_btn__gqAUw\",\"media\":\"style_media__Z0mmQ\",\"square\":\"style_square__Y6OPi\",\"rectangle\":\"style_rectangle__JCQcA\",\"big\":\"style_big__xHrMS\",\"big1\":\"style_big1__YT3wi\",\"big2\":\"style_big2__OWAWD\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport {NavLink} from 'react-router-dom';\nimport LazyImage from '@components/LazyImage';\nimport Spring from '@components/Spring';\n\n// hooks\nimport {useWindowSize} from 'react-use';\n\n// assets\nimport img1 from '@assets/cta/1.webp';\nimport img2 from '@assets/cta/2.webp';\nimport img3 from '@assets/cta/3.webp';\nimport img4 from '@assets/cta/4.webp';\n\nconst CTA = () => {\n    const {width} = useWindowSize();\n\n    return (\n        <section>\n            <div className=\"container\">\n                <div className={`${styles.wrapper} border-10`}>\n                    <div className={styles.main}>\n                        <h3>\n                            <span className={`${styles.emojis} h3`}>\n                                <span>ðŸ”¥</span>\n                                <span>ðŸ”¥</span>\n                                <span>ðŸ”¥</span>\n                            </span>\n                            Create, sell and collect NFT digital assets\n                        </h3>\n                        <p className={`${styles.main_text} text-bold text-light`}>\n                            Buy and sell over 100 cryptocurrencies in the marketplace over 20 fixed currencies using\n                            bank\n                            transfers or credit/debit cards.\n                        </p>\n                        <div>\n                            <NavLink className={`${styles.main_btn} btn btn--outline btn--outline-white`}\n                                     to=\"/connect-wallet\">\n                                Create NFT\n                            </NavLink>\n                        </div>\n                    </div>\n                    {\n                        width >= 768 &&\n                        <div className={styles.media}>\n                            <Spring className={`${styles.big} ${styles.big1}`} type=\"grow\">\n                                <LazyImage src={img1} alt=\"img\"/>\n                            </Spring>\n                            <Spring className={`${styles.big} ${styles.big2}`} type=\"grow\">\n                                <LazyImage src={img2} alt=\"img\"/>\n                            </Spring>\n                            <Spring className={styles.rectangle} type=\"grow\">\n                                <LazyImage src={img3} alt=\"img\"/>\n                            </Spring>\n                            <Spring className={styles.square} type=\"grow\">\n                                <LazyImage src={img4} alt=\"img\"/>\n                            </Spring>\n                        </div>\n                    }\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default CTA","// components\nimport {LazyLoadImage} from 'react-lazy-load-image-component';\n\n// styles\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst LazyImage = ({src, alt, effect = 'blur', className, ...props}) => {\n    return (\n        <LazyLoadImage\n            src={src}\n            alt={alt}\n            effect={effect}\n            wrapperClassName={`${className || ''} lazy-image`}\n            {...props}\n        />\n    );\n}\n\nLazyImage.propTypes = {\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n    effect: PropTypes.oneOf(['blur', 'opacity']),\n    className: PropTypes.string,\n}\n\nexport default LazyImage","// components\nimport {animated, useSpring} from '@react-spring/web';\n\n// hooks\nimport {useInView} from 'react-intersection-observer';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Spring = ({children, index = 1, className, type = 'slide', delay, ...props}) => {\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: true\n    });\n\n    const common = {\n        config: {duration: 300, mass: 1, tension: 300, friction: 30},\n        delay: props.delay ? props.delay : 100 * index,\n    }\n\n    const slide = useSpring({\n        from: {transform: 'translateY(40px)', opacity: 0},\n        to: {transform: inView ? 'translateY(0px)' : 'translateY(40px)', opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const fade = useSpring({\n        from: {opacity: 0},\n        to: {opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const grow = useSpring({\n        from: {transform: 'scale(0.4)'},\n        to: {transform: inView ? 'scale(1)' : 'scale(0.4)'},\n        ...common,\n        ...props\n    });\n\n    const spring = {\n        slide,\n        fade,\n        grow\n    }\n\n    return (\n        <animated.div className={className ? className : ''} style={spring[type]} ref={ref}>\n            {children}\n        </animated.div>\n    )\n}\n\nSpring.propTypes = {\n    children: PropTypes.node.isRequired,\n    index: PropTypes.number,\n    className: PropTypes.string,\n    type: PropTypes.oneOf(['slide', 'fade', 'grow']),\n    delay: PropTypes.number\n}\n\nexport default Spring","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","import { useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmount = function (fn) {\n    var fnRef = useRef(fn);\n    // update the ref each render so if it change the newest callback will be invoked\n    fnRef.current = fn;\n    useEffectOnce(function () { return function () { return fnRef.current(); }; });\n};\nexport default useUnmount;\n","import { useCallback, useRef, useState } from 'react';\nimport useUnmount from './useUnmount';\nvar useRafState = function (initialState) {\n    var frame = useRef(0);\n    var _a = useState(initialState), state = _a[0], setState = _a[1];\n    var setRafState = useCallback(function (value) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(function () {\n            setState(value);\n        });\n    }, []);\n    useUnmount(function () {\n        cancelAnimationFrame(frame.current);\n    });\n    return [state, setRafState];\n};\nexport default useRafState;\n","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import { useEffect } from 'react';\nimport useRafState from './useRafState';\nimport { isBrowser, off, on } from './misc/util';\nvar useWindowSize = function (initialWidth, initialHeight) {\n    if (initialWidth === void 0) { initialWidth = Infinity; }\n    if (initialHeight === void 0) { initialHeight = Infinity; }\n    var _a = useRafState({\n        width: isBrowser ? window.innerWidth : initialWidth,\n        height: isBrowser ? window.innerHeight : initialHeight,\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        if (isBrowser) {\n            var handler_1 = function () {\n                setState({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            };\n            on(window, 'resize', handler_1);\n            return function () {\n                off(window, 'resize', handler_1);\n            };\n        }\n    }, []);\n    return state;\n};\nexport default useWindowSize;\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["CTA","width","useWindowSize","_jsx","children","className","_jsxs","concat","styles","NavLink","to","Spring","type","LazyImage","src","img1","alt","img2","img3","img4","_ref","effect","props","LazyLoadImage","wrapperClassName","index","delay","ref","inView","useInView","threshold","triggerOnce","common","config","duration","mass","tension","friction","spring","slide","useSpring","from","transform","opacity","fade","grow","animated","div","style","useEffect","fn","fnRef","useRef","current","useEffectOnce","initialState","frame","_a","useState","state","setState","setRafState","useCallback","value","cancelAnimationFrame","requestAnimationFrame","useUnmount","isBrowser","window","initialWidth","initialHeight","Infinity","useRafState","innerWidth","height","innerHeight","handler_1","obj","args","_i","arguments","length","addEventListener","apply","on","removeEventListener","off","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","entryTarget","previousEntryTarget","result"],"sourceRoot":""}
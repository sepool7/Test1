{"version":3,"file":"static/js/2182.6e9f33f4.chunk.js","mappings":"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","sources":["components/LazyImage.jsx","webpack://xchain/./src/components/SimplePageHeader/style.module.scss?5f3b","components/SimplePageHeader/index.jsx","components/Spring.jsx","components/Title.jsx","webpack://xchain/./src/layout/connect-wallet/style.module.scss?68b1","layout/connect-wallet/index.jsx","pages/ConnectWallet.jsx","ui/BreadcrumbsNav.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// components\nimport {LazyLoadImage} from 'react-lazy-load-image-component';\n\n// styles\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst LazyImage = ({src, alt, effect = 'blur', className, ...props}) => {\n    return (\n        <LazyLoadImage\n            src={src}\n            alt={alt}\n            effect={effect}\n            wrapperClassName={`${className || ''} lazy-image`}\n            {...props}\n        />\n    );\n}\n\nLazyImage.propTypes = {\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n    effect: PropTypes.oneOf(['blur', 'opacity']),\n    className: PropTypes.string,\n}\n\nexport default LazyImage","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"style_header__1MmKD\",\"header_title\":\"style_header_title__SXvX+\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport Breadcrumbs from '@ui/BreadcrumbsNav';\n\nconst SimplePageHeader = ({title}) => {\n    return (\n        <header className={styles.header}>\n            <div className=\"container d-flex flex-column g-10\">\n                <h2 className={styles.header_title}>{title}</h2>\n                <Breadcrumbs/>\n            </div>\n        </header>\n    );\n}\n\nexport default SimplePageHeader","// components\nimport {animated, useSpring} from '@react-spring/web';\n\n// hooks\nimport {useInView} from 'react-intersection-observer';\n\n// utils\nimport PropTypes from 'prop-types';\n\nconst Spring = ({children, index = 1, className, type = 'slide', delay, ...props}) => {\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: true\n    });\n\n    const common = {\n        config: {duration: 300, mass: 1, tension: 300, friction: 30},\n        delay: props.delay ? props.delay : 100 * index,\n    }\n\n    const slide = useSpring({\n        from: {transform: 'translateY(40px)', opacity: 0},\n        to: {transform: inView ? 'translateY(0px)' : 'translateY(40px)', opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const fade = useSpring({\n        from: {opacity: 0},\n        to: {opacity: inView ? 1 : 0},\n        ...common,\n        ...props\n    });\n\n    const grow = useSpring({\n        from: {transform: 'scale(0.4)'},\n        to: {transform: inView ? 'scale(1)' : 'scale(0.4)'},\n        ...common,\n        ...props\n    });\n\n    const spring = {\n        slide,\n        fade,\n        grow\n    }\n\n    return (\n        <animated.div className={className ? className : ''} style={spring[type]} ref={ref}>\n            {children}\n        </animated.div>\n    )\n}\n\nSpring.propTypes = {\n    children: PropTypes.node.isRequired,\n    index: PropTypes.number,\n    className: PropTypes.string,\n    type: PropTypes.oneOf(['slide', 'fade', 'grow']),\n    delay: PropTypes.number\n}\n\nexport default Spring","// components\nimport {Helmet} from 'react-helmet';\n\nconst Title = ({title}) => {\n    return (\n        <Helmet>\n            <title>{title} | ChainBlock NFT Marketplace React Template</title>\n        </Helmet>\n    )\n}\n\nexport default Title","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"style_wrapper__N9i3V\",\"subtitle\":\"style_subtitle__G4bPu\",\"main\":\"style_main__S8AaB\",\"main_item\":\"style_main_item__V0DL6\",\"img\":\"style_img__Hj-Ib\",\"label\":\"style_label__pUw3D\"};","// styling\nimport styles from './style.module.scss';\n\n// components\nimport LazyImage from '@components/LazyImage';\nimport Spring from '@components/Spring';\n\n// utils\nimport classNames from 'classnames';\n\n// assets\nimport metamask from '@assets/wallets/metamask.webp';\nimport coinbase from '@assets/wallets/coinbase.webp';\nimport glow from '@assets/wallets/glow.webp';\nimport phantom from '@assets/wallets/phantom.webp';\nimport walletConnect from '@assets/wallets/walletconnect.webp';\nimport bitski from '@assets/wallets/bitski.webp';\n\nconst Wallet = () => {\n    const wallets = [\n        {\n            name: 'MetaMask',\n            image: metamask,\n            tag: 'popular',\n        },\n        {\n            name: 'Coinbase Wallet',\n            image: coinbase,\n        },\n        {\n            name: 'Glow',\n            image: glow,\n            tag: 'solana',\n        },\n        {\n            name: 'Phantom',\n            image: phantom,\n            tag: 'solana',\n        },\n        {\n            name: 'WalletConnect',\n            image: walletConnect,\n        },\n        {\n            name: 'Bitski',\n            image: bitski,\n        }\n    ];\n\n    return (\n        <section className=\"mt-0\">\n            <div className=\"container\">\n                <div className={`${styles.wrapper} bg-secondary border-10`}>\n                    <div className=\"d-flex flex-column g-15\">\n                        <h3>You need an Ethereum wallet to use ChainBlock</h3>\n                        <p className={`${styles.subtitle} h6`}>\n                            Connect with one of our available wallet providers or create a new one\n                        </p>\n                    </div>\n                    <div className={styles.main}>\n                        {\n                            wallets.map((wallet, index) => (\n                                <Spring key={index} index={index}>\n                                    <div className={`${styles.main_item} border-hover border-hover--horizontal`}>\n                                        <LazyImage className={styles.img} src={wallet.image} alt={wallet.name}/>\n                                        <h5 className=\"main_item-title text-overflow\">{wallet.name}</h5>\n                                        {\n                                            wallet.tag && (\n                                                <span className={classNames(`${styles.label} label-tag`, {'accent': wallet.tag === 'popular'})}>\n                                                {wallet.tag}\n                                            </span>\n                                            )\n                                        }\n                                    </div>\n                                </Spring>\n                            ))\n                        }\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default Wallet","// components\nimport Title from '@components/Title';\nimport SimplePageHeader from '@components/SimplePageHeader';\nimport Wallet from '@layout/connect-wallet';\n\nconst ConnectWallet = () => {\n    return (\n        <>\n            <Title title=\"Connect wallet\" />\n            <SimplePageHeader title=\"Connect wallet\" />\n            <main>\n                <Wallet />\n            </main>\n        </>\n    )\n}\n\nexport default ConnectWallet","// components\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\nimport {NavLink} from 'react-router-dom';\n\n// hooks\nimport {useEffect, useState} from 'react';\nimport {useLocation} from 'react-router-dom';\n\n// utils\nimport classNames from 'classnames';\n\nconst BreadcrumbsNav = () => {\n    const location = useLocation();\n    const [breadcrumbs, setBreadcrumbs] = useState([]);\n\n    useEffect(() => {\n        const path = location.pathname.split('/');\n        const pathArray = path.map((item, index) => {\n            return {\n                name: item === '' ? 'Home' : item.replace(/-/g, ' '),\n                path: item === '' ? '/' : path.slice(0, index + 1).join('/'),\n            }\n        });\n        setBreadcrumbs(pathArray);\n    }, [location]);\n\n    return (\n        <Breadcrumbs separator=\"•\" sx={{\n            color: 'var(--text)',\n            textTransform: 'capitalize',\n            '& .MuiBreadcrumbs-separator': {\n                color: 'var(--accent)',\n            }}}>\n            {\n                breadcrumbs.map((item, index) => (\n                    <NavLink className={classNames('text-bold link-hover', {\n                        'text-accent disabled': item.path === location.pathname,\n                        'text-uppercase': item.name === 'faq',\n                    })}\n                          key={item.path}\n                          to={item.path}>\n                        {item.name}\n                    </NavLink>\n                ))\n            }\n        </Breadcrumbs>\n    );\n}\n\nexport default BreadcrumbsNav","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["_ref","src","alt","effect","className","props","_jsx","LazyLoadImage","wrapperClassName","concat","title","styles","children","_jsxs","Breadcrumbs","index","type","delay","ref","inView","useInView","threshold","triggerOnce","common","config","duration","mass","tension","friction","spring","slide","useSpring","from","transform","opacity","to","fade","grow","animated","div","style","Helmet","Wallet","wallets","name","image","metamask","tag","coinbase","glow","phantom","walletConnect","bitski","map","wallet","Spring","LazyImage","classNames","ConnectWallet","_Fragment","Title","SimplePageHeader","BreadcrumbsNav","location","useLocation","breadcrumbs","setBreadcrumbs","useState","useEffect","path","pathname","split","pathArray","item","replace","slice","join","separator","sx","color","textTransform","NavLink","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}
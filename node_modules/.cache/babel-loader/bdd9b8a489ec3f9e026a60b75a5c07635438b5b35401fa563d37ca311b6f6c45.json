{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n  const runIfEditModeIsRow = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n      focusTimeout.current = null;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      if (event.key === ' ' && event.shiftKey) {\n        return; // Shift + Space is used to select the row\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('18')) {\n        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough\n      } else {\n        startRowEditModeParams.deleteValue = !!field;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(_ref => {\n        let [thisField, fieldProps] = _ref;\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(_ref2 => {\n      let [field, fieldProps] = _ref2;\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(_ref3 => {\n      let [id, params] = _ref3;\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","signature","runIfEditModeIsRow","callback","editMode","Row","arguments","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","concat","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","version","startsWith","initialValue","deleteValue","startRowEditMode","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","disableIgnoreModificationsIfProcessingProps","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","reduce","acc","cellParams","newValue","getCellValue","value","error","setCellFocus","updateStateToStopRowEditMode","focusedField","finishRowEditMode","unstable_moveFocusToRelativeCell","row","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","_ref","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","_ref2","valueSetter","editingApi","unstable_setRowEditingEditCellValue","idToIdLookup","copyOfPrevRowModesModel","_ref3","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"sources":["C:/Users/Public/Ticketchain/ticket/Template/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ' && event.shiftKey) {\n        return; // Shift + Space is used to select the row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('18')) {\n        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough\n      } else {\n        startRowEditModeParams.deleteValue = !!field;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field);\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
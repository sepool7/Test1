{"version":3,"file":"static/js/3470.a37c5289.chunk.js","mappings":"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","sources":["components/NothingFound.jsx","contexts/filterContext.js","webpack://xchain/./src/layout/explore-grid/style.module.scss?546c","contexts/exploreGridContext.js","layout/explore-grid/index.jsx","pages/ExploreGrid.jsx"],"sourcesContent":["// utils\nimport {lazy} from 'react';\n\n// styling\nimport styled from 'styled-components/macro';\n\n// assets\nimport animation from '@assets/lottie/nodata.json';\n\n// components\nconst Lottie = lazy(() => import('lottie-react'));\nconst Fade = lazy(() => import('@mui/material/Fade'));\n\nconst Wrapper = styled.div`\n  .lottie {\n    width: 50%;\n    max-width: 240px;\n    margin: 40px 0 20px;\n  }\n`;\n\nconst NothingFound = () => {\n    return (\n        <Fade in={true} timeout={1000}>\n            <Wrapper className=\"d-flex flex-column align-items-center\">\n                <Lottie className=\"lottie\" animationData={animation}/>\n                <h4 className=\"title\">Sorry, nothing found</h4>\n            </Wrapper>\n        </Fade>\n    );\n}\n\nexport default NothingFound","import {createContext, useState, useContext, useEffect} from 'react';\nimport useScrollLock from '@hooks/useScrollLock';\n\nexport const FilterContext = createContext(undefined);\n\nexport const FilterContextAPI = ({children}) => {\n    const [search, setSearch] = useState('');\n    const [filters, setFilters] = useState([]);\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n    const {lockScroll, unlockScroll} = useScrollLock();\n\n    const setQuery = (query) => {\n        setSearch(query);\n    }\n\n    const changeFilters = (filter) => {\n        if (filters.includes(filter)) {\n            setFilters(filters.filter(f => f !== filter));\n        } else {\n            setFilters([...filters, filter]);\n        }\n    }\n\n    const resetFilters = () => setFilters([]);\n\n    const filterData = (data, selector) => {\n        return data.filter(item => {\n            const isSearch = item[selector].toLowerCase().includes(search.toLowerCase()) || search === '';\n            const isCategory = filters.length === 0 || item.categories.some(category => filters.includes(category));\n\n            return isSearch && isCategory;\n        });\n    }\n\n    const openSidebar = () => setIsSidebarOpen(true);\n\n    const closeSidebar = () => setIsSidebarOpen(false);\n\n    useEffect(() => {\n        isSidebarOpen ? lockScroll() : unlockScroll();\n\n        window.addEventListener('resize', () => {\n            unlockScroll();\n        });\n\n        return () => {\n            unlockScroll();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isSidebarOpen]);\n\n    return (\n        <FilterContext.Provider value={{\n            search,\n            filters,\n            filterData,\n            isSidebarOpen,\n            setQuery,\n            changeFilters,\n            resetFilters,\n            openSidebar,\n            closeSidebar\n        }}>\n            {children}\n        </FilterContext.Provider>\n    );\n}\n\nexport const useFilterContext = () => useContext(FilterContext);","// extracted by mini-css-extract-plugin\nexport default {\"select\":\"style_select__MwhQR\",\"sorting\":\"style_sorting__LzsHT\"};","import {createContext, useState, useContext} from 'react';\n\nimport all_items from '@db/all_items';\nimport {SORTING_OPTIONS} from '@constants/explore';\n\nexport const ExploreGridContext = createContext(undefined);\n\nexport const ExploreGridContextAPI = ({children}) => {\n    const items = all_items;\n    const [sort, setSort] = useState(SORTING_OPTIONS[0]);\n    const [category, setCategory] = useState(null);\n    const [status, setStatus] = useState(null);\n    const [type, setType] = useState(null);\n    const [priceRange, setPriceRange] = useState(null);\n\n    const filteredItems = items.filter(item => {\n        return (\n            (category ? item.categories.includes(category.value) : true) &&\n            (status ? item.statuses.includes(status.value) : true) &&\n            (type ? item.type === type.value : true) &&\n            (\n                priceRange ?\n                    (\n                        priceRange.value === 'all' ?\n                            true :\n                            priceRange.value === '100+' ?\n                                item.price >= 100 :\n                                item.price >= priceRange.value.split('-')[0] && item.price <= priceRange.value.split('-')[1]\n                    ) :\n                    true\n            ))\n    });\n\n    const sortedItems = filteredItems.sort((a, b) => {\n        if (sort.value === 'default') {\n            return a.id - b.id;\n        } else if (sort.value === 'price-asc') {\n            return a.price - b.price;\n        } else if (sort.value === 'price-desc') {\n            return b.price - a.price;\n        } else if (sort.value === 'likes-asc') {\n            return b.likes - a.likes;\n        } else if (sort.value === 'likes-desc') {\n            return a.likes - b.likes;\n        }\n    });\n\n    return (\n        <ExploreGridContext.Provider value={{\n            sortedItems,\n            sort,\n            setSort,\n            category,\n            setCategory,\n            status,\n            setStatus,\n            type,\n            setType,\n            priceRange,\n            setPriceRange\n        }}>\n            {children}\n        </ExploreGridContext.Provider>\n    );\n}\n\nexport const useExploreGridContext = () => useContext(ExploreGridContext);\n","// styling\nimport styles from './style.module.scss';\n\n// components\nimport CustomSelect from '@ui/CustomSelect';\nimport ItemsGrid from '@components/ItemsGrid';\nimport Pagination from '@ui/Pagination';\nimport NothingFound from '@components/NothingFound';\n\n// hooks\nimport usePagination from '@hooks/usePagination';\nimport {useExploreGridContext} from '@contexts/exploreGridContext';\n\n// constants\nimport {CATEGORIES, TYPE, STATUS, SORTING_OPTIONS, PRICE_RANGE} from '@constants/explore';\n\nconst ExploreGridContent = () => {\n    const {\n        sort,\n        setSort,\n        sortedItems,\n        category,\n        setCategory,\n        status,\n        setStatus,\n        type,\n        setType,\n        priceRange,\n        setPriceRange\n    } = useExploreGridContext();\n    const pagination = usePagination(sortedItems, 12);\n\n    return (\n        <div className=\"section mt-0\">\n            <div className=\"container d-flex flex-column g-30\" ref={pagination.containerRef}>\n                <div className={styles.sorting}>\n                    <div className={styles.select}>\n                        <CustomSelect setSelected={setPriceRange}\n                                      options={PRICE_RANGE}\n                                      selected={priceRange}\n                                      placeholder=\"Price range\"/>\n                        <CustomSelect setSelected={setCategory}\n                                      options={CATEGORIES}\n                                      selected={category}\n                                      placeholder=\"Categories\"/>\n                        <CustomSelect setSelected={setStatus}\n                                      options={STATUS}\n                                      selected={status}\n                                      placeholder=\"Status\"/>\n                        <CustomSelect setSelected={setType}\n                                      options={TYPE}\n                                      selected={type}\n                                      placeholder=\"Type\"/>\n                        <CustomSelect setSelected={setSort}\n                                      options={SORTING_OPTIONS}\n                                      selected={sort}/>\n                    </div>\n                    <span>{pagination.showingOf()}</span>\n                </div>\n                <div>\n                    {\n                        sortedItems.length > 0 ?\n                            <ItemsGrid items={pagination.currentItems()}/>\n                            :\n                            <NothingFound/>\n                    }\n                    {pagination.maxPage > 1 && <Pagination pagination={pagination}/>}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ExploreGridContent","// components\nimport Title from '@components/Title';\nimport SimplePageHeader from '@components/SimplePageHeader';\nimport ExploreGridContent from '@layout/explore-grid';\n\n// context\nimport {ExploreGridContextAPI} from '@contexts/exploreGridContext';\nimport {FilterContextAPI} from '@contexts/filterContext';\n\nconst ExploreGrid = () => {\n    return (\n        <>\n            <Title title=\"Explore\" />\n            <SimplePageHeader title=\"Explore\" />\n            <main>\n                <ExploreGridContextAPI>\n                    <FilterContextAPI>\n                        <ExploreGridContent />\n                    </FilterContextAPI>\n                </ExploreGridContextAPI>\n            </main>\n        </>\n    )\n}\n\nexport default ExploreGrid"],"names":["Lottie","lazy","Fade","Wrapper","styled","div","withConfig","componentId","NothingFound","_jsx","in","timeout","children","_jsxs","className","animationData","animation","FilterContext","createContext","undefined","FilterContextAPI","_ref","search","setSearch","useState","filters","setFilters","isSidebarOpen","setIsSidebarOpen","lockScroll","unlockScroll","useScrollLock","useEffect","window","addEventListener","Provider","value","filterData","data","selector","filter","item","isSearch","toLowerCase","includes","isCategory","length","categories","some","category","setQuery","query","changeFilters","f","resetFilters","openSidebar","closeSidebar","useFilterContext","useContext","ExploreGridContext","ExploreGridContextAPI","items","all_items","sort","setSort","SORTING_OPTIONS","setCategory","status","setStatus","type","setType","priceRange","setPriceRange","sortedItems","statuses","price","split","a","b","id","likes","ExploreGridContent","pagination","usePagination","ref","containerRef","styles","CustomSelect","setSelected","options","PRICE_RANGE","selected","placeholder","CATEGORIES","STATUS","TYPE","showingOf","ItemsGrid","currentItems","maxPage","Pagination","ExploreGrid","_Fragment","Title","title","SimplePageHeader"],"sourceRoot":""}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: 'selectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(\"Setting selection model\");\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(\"Setting selection for row \".concat(id));\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(\"Toggling selection for row \".concat(id));\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(\"Setting selection for several rows\");\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 ? arguments[2] : undefined;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(\"Expanding selection from row \".concat(startId, \" to row \").concat(endId)); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n    if (disableSelectionOnClick) {\n      return;\n    }\n    const field = (_closest = event.target.closest(\".\".concat(gridClasses.cell))) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.isPinned) {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, 'rowClick', handleRowClick);\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // props.isRowSelectable changed\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, _ref2) => {\n        let {\n          id\n        } = _ref2;\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};","map":{"version":3,"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridVisibleSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","selectionStateInitializer","state","props","_getSelectionModelPro","selection","selectionModel","useGridSelection","apiRef","logger","propSelectionModel","useMemo","current","lastRowToggled","useRef","unstable_registerControlState","stateId","propModel","propOnChange","onSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleSelection","disableSelectionOnClick","pagination","paginationMode","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setSelectionModel","model","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","position","isPinned","getSelectedRows","selectRow","arguments","length","undefined","resetSelection","concat","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","_ref","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_closest","field","target","closest","cell","getAttribute","column","getColumn","type","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","toLowerCase","getAllRowIds","useEffect","isStateControlled","currentPageRows","currentPageRowsLookup","reduce","acc","_ref2","firstSelectableRow","find","isSelectable"],"sources":["C:/Users/Public/Ticketchain/ticket/Template/node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: 'selectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    const rowNode = apiRef.current.getRowNode(params.id);\n\n    if (rowNode.isPinned) {\n      return;\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, 'rowClick', handleRowClick);\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\nconst serializeCellValue = (value, delimiterCharacter) => {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"'); // Make sure value containing delimiter or line break won't be split into multiple rows\n\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return \"\\\"\".concat(formattedValue, \"\\\"\");\n    }\n    return formattedValue;\n  }\n  return value;\n};\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\nconst serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n});\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => \"\".concat(acc).concat(serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter), \"\\r\\n\"), '').trim();\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n  const CSVHead = \"\".concat(columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter), \"\\r\\n\");\n  return \"\".concat(CSVHead).concat(CSVBody).trim();\n}","map":{"version":3,"names":["GRID_CHECKBOX_SELECTION_COL_DEF","buildWarning","serializeCellValue","value","delimiterCharacter","formattedValue","replace","some","delimiter","includes","concat","objectFormattedValueWarning","serializeRow","id","columns","getCellParams","map","column","cellParams","field","process","env","NODE_ENV","String","buildCSV","options","rowIds","includeHeaders","CSVBody","reduce","acc","join","trim","CSVHead","filter","headerName"],"sources":["C:/Users/Public/Ticketchain/ticket/Template/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"sourcesContent":["import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\n\nconst serializeCellValue = (value, delimiterCharacter) => {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"'); // Make sure value containing delimiter or line break won't be split into multiple rows\n\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n\n    return formattedValue;\n  }\n\n  return value;\n};\n\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n\n  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n});\n\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\\r\\n`, '').trim();\n\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"],"mappings":"AAAA,SAASA,+BAA+B,QAAQ,oBAAoB;AACpE,SAASC,YAAY,QAAQ,2BAA2B;AAExD,MAAMC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,kBAAkB,KAAK;EACxD,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAME,cAAc,GAAGF,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;;IAElD,IAAI,CAACF,kBAAkB,EAAE,IAAI,EAAE,IAAI,CAAC,CAACG,IAAI,CAACC,SAAS,IAAIH,cAAc,CAACI,QAAQ,CAACD,SAAS,CAAC,CAAC,EAAE;MAC1F,YAAAE,MAAA,CAAWL,cAAc;IAC3B;IAEA,OAAOA,cAAc;EACvB;EAEA,OAAOF,KAAK;AACd,CAAC;AAED,MAAMQ,2BAA2B,GAAGV,YAAY,CAAC,CAAC,kIAAkI,EAAE,6EAA6E,CAAC,CAAC;AAErQ,MAAMW,YAAY,GAAGA,CAACC,EAAE,EAAEC,OAAO,EAAEC,aAAa,EAAEX,kBAAkB,KAAKU,OAAO,CAACE,GAAG,CAACC,MAAM,IAAI;EAC7F,MAAMC,UAAU,GAAGH,aAAa,CAACF,EAAE,EAAEI,MAAM,CAACE,KAAK,CAAC;EAElD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAIC,MAAM,CAACL,UAAU,CAACb,cAAc,CAAC,KAAK,iBAAiB,EAAE;MAC3DM,2BAA2B,CAAC,CAAC;IAC/B;EACF;EAEA,OAAOT,kBAAkB,CAACgB,UAAU,CAACb,cAAc,EAAED,kBAAkB,CAAC;AAC1E,CAAC,CAAC;AAEF,OAAO,SAASoB,QAAQA,CAACC,OAAO,EAAE;EAChC,MAAM;IACJX,OAAO;IACPY,MAAM;IACNX,aAAa;IACbX,kBAAkB;IAClBuB;EACF,CAAC,GAAGF,OAAO;EACX,MAAMG,OAAO,GAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEjB,EAAE,QAAAH,MAAA,CAAQoB,GAAG,EAAApB,MAAA,CAAGE,YAAY,CAACC,EAAE,EAAEC,OAAO,EAAEC,aAAa,EAAEX,kBAAkB,CAAC,CAAC2B,IAAI,CAAC3B,kBAAkB,CAAC,SAAM,EAAE,EAAE,CAAC,CAAC4B,IAAI,CAAC,CAAC;EAE3J,IAAI,CAACL,cAAc,EAAE;IACnB,OAAOC,OAAO;EAChB;EAEA,MAAMK,OAAO,MAAAvB,MAAA,CAAMI,OAAO,CAACoB,MAAM,CAACjB,MAAM,IAAIA,MAAM,CAACE,KAAK,KAAKnB,+BAA+B,CAACmB,KAAK,CAAC,CAACH,GAAG,CAACC,MAAM,IAAIf,kBAAkB,CAACe,MAAM,CAACkB,UAAU,IAAIlB,MAAM,CAACE,KAAK,EAAEf,kBAAkB,CAAC,CAAC,CAAC2B,IAAI,CAAC3B,kBAAkB,CAAC,SAAM;EAC3N,OAAO,GAAAM,MAAA,CAAGuB,OAAO,EAAAvB,MAAA,CAAGkB,OAAO,EAAGI,IAAI,CAAC,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
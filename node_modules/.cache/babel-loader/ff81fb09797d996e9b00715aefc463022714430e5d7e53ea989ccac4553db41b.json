{"ast":null,"code":"/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport globalVars from './globalVars';\nimport leIE8 from './lib/leIE8'; // less then or equal to IE8\nimport mainEventConnectors from './mainEventConnectors';\n\n// constants\nimport { DEFAULT_THROTTLE_RATE } from './constants';\n\n/**\n * Subscribe to UI events.\n * @method subscribe\n * @param {String} type - The type of event.\n * @param {Function} cb - The callback function.\n * @param {Object} options.context - The caller.\n * @param {Number} options.throttleRate - The amount of time for throttling.\n * @param {Boolean} options.useRAF - Use rAF for throttling if true.\n * @param {Object} options.eventOptions - Option to pass to event listener\n * @return {Object} The object with unsubscribe function.\n */\nfunction subscribe(type, cb) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var useRAF = options.useRAF || false;\n  var throttleRate = parseInt(options.throttleRate, 10);\n  var eventOptions = options.eventOptions;\n  if (isNaN(throttleRate)) {\n    throttleRate = DEFAULT_THROTTLE_RATE;\n  }\n  if (useRAF) {\n    throttleRate = 'raf';\n  }\n\n  // turn off throttle if the browser is IE8 or less, because window.event will be reset\n  // when using any delayed function, i.g., setTimeout, or rAF.\n  if (leIE8) {\n    throttleRate = 0;\n  }\n\n  // once those variables enabled, then never disabled.\n  globalVars.enableScrollInfo = globalVars.enableScrollInfo || options.enableScrollInfo || false;\n  globalVars.enableResizeInfo = globalVars.enableResizeInfo || options.enableResizeInfo || false;\n  globalVars.enableTouchInfo = globalVars.enableTouchInfo || options.enableTouchInfo || false;\n  return mainEventConnectors[type](throttleRate, cb, options, eventOptions);\n}\nexport default subscribe;","map":{"version":3,"names":["globalVars","leIE8","mainEventConnectors","DEFAULT_THROTTLE_RATE","subscribe","type","cb","options","arguments","length","undefined","useRAF","throttleRate","parseInt","eventOptions","isNaN","enableScrollInfo","enableResizeInfo","enableTouchInfo"],"sources":["C:/Users/Public/Ticketchain/ticket/Template/node_modules/subscribe-ui-event/dist-es/subscribe.js"],"sourcesContent":["/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nimport globalVars from './globalVars';\nimport leIE8 from './lib/leIE8'; // less then or equal to IE8\nimport mainEventConnectors from './mainEventConnectors';\n\n// constants\nimport { DEFAULT_THROTTLE_RATE } from './constants';\n\n/**\n * Subscribe to UI events.\n * @method subscribe\n * @param {String} type - The type of event.\n * @param {Function} cb - The callback function.\n * @param {Object} options.context - The caller.\n * @param {Number} options.throttleRate - The amount of time for throttling.\n * @param {Boolean} options.useRAF - Use rAF for throttling if true.\n * @param {Object} options.eventOptions - Option to pass to event listener\n * @return {Object} The object with unsubscribe function.\n */\nfunction subscribe(type, cb) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var useRAF = options.useRAF || false;\n  var throttleRate = parseInt(options.throttleRate, 10);\n  var eventOptions = options.eventOptions;\n\n  if (isNaN(throttleRate)) {\n    throttleRate = DEFAULT_THROTTLE_RATE;\n  }\n\n  if (useRAF) {\n    throttleRate = 'raf';\n  }\n\n  // turn off throttle if the browser is IE8 or less, because window.event will be reset\n  // when using any delayed function, i.g., setTimeout, or rAF.\n  if (leIE8) {\n    throttleRate = 0;\n  }\n\n  // once those variables enabled, then never disabled.\n  globalVars.enableScrollInfo = globalVars.enableScrollInfo || options.enableScrollInfo || false;\n  globalVars.enableResizeInfo = globalVars.enableResizeInfo || options.enableResizeInfo || false;\n  globalVars.enableTouchInfo = globalVars.enableTouchInfo || options.enableTouchInfo || false;\n\n  return mainEventConnectors[type](throttleRate, cb, options, eventOptions);\n}\n\nexport default subscribe;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,cAAc;AACrC,OAAOC,KAAK,MAAM,aAAa,CAAC,CAAC;AACjC,OAAOC,mBAAmB,MAAM,uBAAuB;;AAEvD;AACA,SAASC,qBAAqB,QAAQ,aAAa;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,IAAI,EAAEC,EAAE,EAAE;EAC3B,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEpF,IAAIG,MAAM,GAAGJ,OAAO,CAACI,MAAM,IAAI,KAAK;EACpC,IAAIC,YAAY,GAAGC,QAAQ,CAACN,OAAO,CAACK,YAAY,EAAE,EAAE,CAAC;EACrD,IAAIE,YAAY,GAAGP,OAAO,CAACO,YAAY;EAEvC,IAAIC,KAAK,CAACH,YAAY,CAAC,EAAE;IACvBA,YAAY,GAAGT,qBAAqB;EACtC;EAEA,IAAIQ,MAAM,EAAE;IACVC,YAAY,GAAG,KAAK;EACtB;;EAEA;EACA;EACA,IAAIX,KAAK,EAAE;IACTW,YAAY,GAAG,CAAC;EAClB;;EAEA;EACAZ,UAAU,CAACgB,gBAAgB,GAAGhB,UAAU,CAACgB,gBAAgB,IAAIT,OAAO,CAACS,gBAAgB,IAAI,KAAK;EAC9FhB,UAAU,CAACiB,gBAAgB,GAAGjB,UAAU,CAACiB,gBAAgB,IAAIV,OAAO,CAACU,gBAAgB,IAAI,KAAK;EAC9FjB,UAAU,CAACkB,eAAe,GAAGlB,UAAU,CAACkB,eAAe,IAAIX,OAAO,CAACW,eAAe,IAAI,KAAK;EAE3F,OAAOhB,mBAAmB,CAACG,IAAI,CAAC,CAACO,YAAY,EAAEN,EAAE,EAAEC,OAAO,EAAEO,YAAY,CAAC;AAC3E;AAEA,eAAeV,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as React from 'react';\nimport { useGridLogger } from './useGridLogger';\nexport function useGridScrollFn(apiRef, renderingZoneElementRef, columnHeadersElementRef) {\n  const logger = useGridLogger(apiRef, 'useGridScrollFn');\n  const previousValue = React.useRef();\n  const scrollTo = React.useCallback(v => {\n    var _previousValue$curren;\n    if (v.left === ((_previousValue$curren = previousValue.current) == null ? void 0 : _previousValue$curren.left) && v.top === previousValue.current.top) {\n      return;\n    }\n    if (renderingZoneElementRef && renderingZoneElementRef.current) {\n      logger.debug(\"Moving \".concat(renderingZoneElementRef.current.className, \" to: \").concat(v.left, \"-\").concat(v.top)); // Force the creation of a layer, avoid paint when changing the transform value.\n\n      renderingZoneElementRef.current.style.transform = \"translate3d(\".concat(-v.left, \"px, \").concat(-v.top, \"px, 0px)\");\n      columnHeadersElementRef.current.style.transform = \"translate3d(\".concat(-v.left, \"px, 0px, 0px)\");\n      previousValue.current = v;\n    }\n  }, [renderingZoneElementRef, logger, columnHeadersElementRef]);\n  return [scrollTo];\n}","map":{"version":3,"names":["React","useGridLogger","useGridScrollFn","apiRef","renderingZoneElementRef","columnHeadersElementRef","logger","previousValue","useRef","scrollTo","useCallback","v","_previousValue$curren","left","current","top","debug","concat","className","style","transform"],"sources":["C:/Users/Public/Ticketchain/ticket/Template/node_modules/@mui/x-data-grid/hooks/utils/useGridScrollFn.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridLogger } from './useGridLogger';\nexport function useGridScrollFn(apiRef, renderingZoneElementRef, columnHeadersElementRef) {\n  const logger = useGridLogger(apiRef, 'useGridScrollFn');\n  const previousValue = React.useRef();\n  const scrollTo = React.useCallback(v => {\n    var _previousValue$curren;\n\n    if (v.left === ((_previousValue$curren = previousValue.current) == null ? void 0 : _previousValue$curren.left) && v.top === previousValue.current.top) {\n      return;\n    }\n\n    if (renderingZoneElementRef && renderingZoneElementRef.current) {\n      logger.debug(`Moving ${renderingZoneElementRef.current.className} to: ${v.left}-${v.top}`); // Force the creation of a layer, avoid paint when changing the transform value.\n\n      renderingZoneElementRef.current.style.transform = `translate3d(${-v.left}px, ${-v.top}px, 0px)`;\n      columnHeadersElementRef.current.style.transform = `translate3d(${-v.left}px, 0px, 0px)`;\n      previousValue.current = v;\n    }\n  }, [renderingZoneElementRef, logger, columnHeadersElementRef]);\n  return [scrollTo];\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,SAASC,eAAeA,CAACC,MAAM,EAAEC,uBAAuB,EAAEC,uBAAuB,EAAE;EACxF,MAAMC,MAAM,GAAGL,aAAa,CAACE,MAAM,EAAE,iBAAiB,CAAC;EACvD,MAAMI,aAAa,GAAGP,KAAK,CAACQ,MAAM,CAAC,CAAC;EACpC,MAAMC,QAAQ,GAAGT,KAAK,CAACU,WAAW,CAACC,CAAC,IAAI;IACtC,IAAIC,qBAAqB;IAEzB,IAAID,CAAC,CAACE,IAAI,MAAM,CAACD,qBAAqB,GAAGL,aAAa,CAACO,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,qBAAqB,CAACC,IAAI,CAAC,IAAIF,CAAC,CAACI,GAAG,KAAKR,aAAa,CAACO,OAAO,CAACC,GAAG,EAAE;MACrJ;IACF;IAEA,IAAIX,uBAAuB,IAAIA,uBAAuB,CAACU,OAAO,EAAE;MAC9DR,MAAM,CAACU,KAAK,WAAAC,MAAA,CAAWb,uBAAuB,CAACU,OAAO,CAACI,SAAS,WAAAD,MAAA,CAAQN,CAAC,CAACE,IAAI,OAAAI,MAAA,CAAIN,CAAC,CAACI,GAAG,CAAE,CAAC,CAAC,CAAC;;MAE5FX,uBAAuB,CAACU,OAAO,CAACK,KAAK,CAACC,SAAS,kBAAAH,MAAA,CAAkB,CAACN,CAAC,CAACE,IAAI,UAAAI,MAAA,CAAO,CAACN,CAAC,CAACI,GAAG,aAAU;MAC/FV,uBAAuB,CAACS,OAAO,CAACK,KAAK,CAACC,SAAS,kBAAAH,MAAA,CAAkB,CAACN,CAAC,CAACE,IAAI,kBAAe;MACvFN,aAAa,CAACO,OAAO,GAAGH,CAAC;IAC3B;EACF,CAAC,EAAE,CAACP,uBAAuB,EAAEE,MAAM,EAAED,uBAAuB,CAAC,CAAC;EAC9D,OAAO,CAACI,QAAQ,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}